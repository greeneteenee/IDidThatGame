// <auto-generated />
using System;
using IDidThatGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDidThatGame.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200516193626_SeedChallengeItems")]
    partial class SeedChallengeItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IDidThatGame.Models.ActionItem", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Advanced")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            ActionId = 1,
                            ActionName = "Crab walk",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 2,
                            ActionName = "Take giant steps",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 3,
                            ActionName = "Crawl",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 4,
                            ActionName = "Dance",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 5,
                            ActionName = "Skip",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 6,
                            ActionName = "Penguin walk",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 7,
                            ActionName = "Tip toe",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 8,
                            ActionName = "Hop",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 9,
                            ActionName = "Walk backwards",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 10,
                            ActionName = "Spin",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 11,
                            ActionName = "Gallop",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 12,
                            ActionName = "Roll",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 13,
                            ActionName = "Run",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 14,
                            ActionName = "Frog hop",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 15,
                            ActionName = "Jumping jack",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 16,
                            ActionName = "Lunge",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 17,
                            ActionName = "Tightrope",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 18,
                            ActionName = "Hop on one leg",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 19,
                            ActionName = "March",
                            Advanced = false,
                            Category = "default"
                        },
                        new
                        {
                            ActionId = 20,
                            ActionName = "Skate",
                            Advanced = false,
                            Category = "default"
                        });
                });

            modelBuilder.Entity("IDidThatGame.Models.ChallengeItem", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Advanced")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChallengeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChallengeId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            ChallengeId = 1,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 2,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 3,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book on your head!"
                        },
                        new
                        {
                            ChallengeId = 4,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book inside your clothes!"
                        },
                        new
                        {
                            ChallengeId = 5,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book under your arm!"
                        },
                        new
                        {
                            ChallengeId = 6,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 7,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book between your knees!"
                        },
                        new
                        {
                            ChallengeId = 8,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book under your chin!"
                        },
                        new
                        {
                            ChallengeId = 9,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a book behind your back!"
                        },
                        new
                        {
                            ChallengeId = 10,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 11,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 12,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball inside your clothes!"
                        },
                        new
                        {
                            ChallengeId = 13,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball under your arm!"
                        },
                        new
                        {
                            ChallengeId = 14,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 15,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball between your knees!"
                        },
                        new
                        {
                            ChallengeId = 16,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a ball under your chin!"
                        },
                        new
                        {
                            ChallengeId = 17,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 18,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 19,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle inside your clothes!"
                        },
                        new
                        {
                            ChallengeId = 20,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle under your arm!"
                        },
                        new
                        {
                            ChallengeId = 21,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 22,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle between your knees!"
                        },
                        new
                        {
                            ChallengeId = 23,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a bottle under your chin!"
                        },
                        new
                        {
                            ChallengeId = 24,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 25,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 26,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal on your head!"
                        },
                        new
                        {
                            ChallengeId = 27,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal inside your clothes!"
                        },
                        new
                        {
                            ChallengeId = 28,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal under your arm!"
                        },
                        new
                        {
                            ChallengeId = 29,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 30,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal between your knees!"
                        },
                        new
                        {
                            ChallengeId = 31,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal under your chin!"
                        },
                        new
                        {
                            ChallengeId = 32,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a stuffed animal behind your back!"
                        },
                        new
                        {
                            ChallengeId = 33,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 34,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 35,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow on your head!"
                        },
                        new
                        {
                            ChallengeId = 36,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow inside your clothes!"
                        },
                        new
                        {
                            ChallengeId = 37,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow under your arm!"
                        },
                        new
                        {
                            ChallengeId = 38,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 39,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow between your knees!"
                        },
                        new
                        {
                            ChallengeId = 40,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow under your chin!"
                        },
                        new
                        {
                            ChallengeId = 41,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a pillow behind your back!"
                        },
                        new
                        {
                            ChallengeId = 42,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 43,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 44,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom over your head!"
                        },
                        new
                        {
                            ChallengeId = 45,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom behind your back!"
                        },
                        new
                        {
                            ChallengeId = 46,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom under your arm!"
                        },
                        new
                        {
                            ChallengeId = 47,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 48,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom between your knees!"
                        },
                        new
                        {
                            ChallengeId = 49,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a broom under your chin!"
                        },
                        new
                        {
                            ChallengeId = 50,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a blanket over your head!"
                        },
                        new
                        {
                            ChallengeId = 51,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a blanket behind your back!"
                        },
                        new
                        {
                            ChallengeId = 52,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a spoon between your teeth!"
                        },
                        new
                        {
                            ChallengeId = 53,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a spoon on your nose!"
                        },
                        new
                        {
                            ChallengeId = 54,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup in your left hand!"
                        },
                        new
                        {
                            ChallengeId = 55,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup in your right hand!"
                        },
                        new
                        {
                            ChallengeId = 56,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup on your head!"
                        },
                        new
                        {
                            ChallengeId = 57,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup inside your clothes!"
                        },
                        new
                        {
                            ChallengeId = 58,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 59,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup between your knees!"
                        },
                        new
                        {
                            ChallengeId = 60,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup under your chin!"
                        },
                        new
                        {
                            ChallengeId = 61,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a cup on your shoulder!"
                        },
                        new
                        {
                            ChallengeId = 62,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a paper on your head!"
                        },
                        new
                        {
                            ChallengeId = 63,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a paper between your elbows!"
                        },
                        new
                        {
                            ChallengeId = 64,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with a paper between your knees!"
                        },
                        new
                        {
                            ChallengeId = 65,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "while bouncing a ball!"
                        },
                        new
                        {
                            ChallengeId = 66,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "in a pillow case!"
                        },
                        new
                        {
                            ChallengeId = 67,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "backwards!"
                        },
                        new
                        {
                            ChallengeId = 68,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "sideways!"
                        },
                        new
                        {
                            ChallengeId = 69,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with your hands behind your back!"
                        },
                        new
                        {
                            ChallengeId = 70,
                            Advanced = false,
                            Category = "default",
                            ChallengeName = "with your hands on your head!"
                        });
                });

            modelBuilder.Entity("IDidThatGame.Models.PlaceItem", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            PlaceId = 1,
                            Category = "home",
                            PlaceName = "to the fridge"
                        },
                        new
                        {
                            PlaceId = 2,
                            Category = "home",
                            PlaceName = "to a sink"
                        },
                        new
                        {
                            PlaceId = 3,
                            Category = "home",
                            PlaceName = "to the front door"
                        },
                        new
                        {
                            PlaceId = 4,
                            Category = "home",
                            PlaceName = "to four walls"
                        },
                        new
                        {
                            PlaceId = 5,
                            Category = "home",
                            PlaceName = "to two lightswitches"
                        },
                        new
                        {
                            PlaceId = 6,
                            Category = "home",
                            PlaceName = "to a tv"
                        },
                        new
                        {
                            PlaceId = 7,
                            Category = "home",
                            PlaceName = "to a mirror"
                        },
                        new
                        {
                            PlaceId = 8,
                            Category = "home",
                            PlaceName = "to a plant"
                        },
                        new
                        {
                            PlaceId = 9,
                            Category = "home",
                            PlaceName = "to a bathtub"
                        },
                        new
                        {
                            PlaceId = 10,
                            Category = "home",
                            PlaceName = "to a shower"
                        },
                        new
                        {
                            PlaceId = 11,
                            Category = "home",
                            PlaceName = "to a bookcase"
                        },
                        new
                        {
                            PlaceId = 12,
                            Category = "home",
                            PlaceName = "to a trashcan"
                        },
                        new
                        {
                            PlaceId = 13,
                            Category = "home",
                            PlaceName = "around a chair"
                        },
                        new
                        {
                            PlaceId = 14,
                            Category = "home",
                            PlaceName = "to a bedroom"
                        },
                        new
                        {
                            PlaceId = 15,
                            Category = "home",
                            PlaceName = "to three rooms"
                        },
                        new
                        {
                            PlaceId = 16,
                            Category = "home",
                            PlaceName = "around a table"
                        },
                        new
                        {
                            PlaceId = 17,
                            Category = "home",
                            PlaceName = "under a table and back"
                        },
                        new
                        {
                            PlaceId = 18,
                            Category = "home",
                            PlaceName = "over a bed"
                        },
                        new
                        {
                            PlaceId = 19,
                            Category = "home",
                            PlaceName = "over a sofa and back"
                        },
                        new
                        {
                            PlaceId = 20,
                            Category = "home",
                            PlaceName = "to two rugs"
                        },
                        new
                        {
                            PlaceId = 21,
                            Category = "home",
                            PlaceName = "to two doors"
                        },
                        new
                        {
                            PlaceId = 22,
                            Category = "home",
                            PlaceName = "to a toilet"
                        },
                        new
                        {
                            PlaceId = 23,
                            Category = "home",
                            PlaceName = "to a closet"
                        },
                        new
                        {
                            PlaceId = 24,
                            Category = "home",
                            PlaceName = "to a window and back"
                        },
                        new
                        {
                            PlaceId = 25,
                            Category = "home",
                            PlaceName = "to something red"
                        },
                        new
                        {
                            PlaceId = 26,
                            Category = "home",
                            PlaceName = "to something blue"
                        },
                        new
                        {
                            PlaceId = 27,
                            Category = "home",
                            PlaceName = "to something yellow"
                        },
                        new
                        {
                            PlaceId = 28,
                            Category = "home",
                            PlaceName = "to something green"
                        },
                        new
                        {
                            PlaceId = 29,
                            Category = "home",
                            PlaceName = "to something purple"
                        },
                        new
                        {
                            PlaceId = 30,
                            Category = "home",
                            PlaceName = "to something orange"
                        },
                        new
                        {
                            PlaceId = 31,
                            Category = "home",
                            PlaceName = "to something pink"
                        },
                        new
                        {
                            PlaceId = 32,
                            Category = "home",
                            PlaceName = "behind a curtain and back"
                        },
                        new
                        {
                            PlaceId = 33,
                            Category = "home",
                            PlaceName = "to a toy and back"
                        },
                        new
                        {
                            PlaceId = 34,
                            Category = "home",
                            PlaceName = "to a picture and back"
                        },
                        new
                        {
                            PlaceId = 35,
                            Category = "home",
                            PlaceName = "to a laundry basket"
                        },
                        new
                        {
                            PlaceId = 36,
                            Category = "home",
                            PlaceName = "to a computer"
                        },
                        new
                        {
                            PlaceId = 37,
                            Category = "home",
                            PlaceName = "to two lamps"
                        },
                        new
                        {
                            PlaceId = 38,
                            Category = "home",
                            PlaceName = "to a shoe and back"
                        },
                        new
                        {
                            PlaceId = 39,
                            Category = "home",
                            PlaceName = "over a pillow and back"
                        },
                        new
                        {
                            PlaceId = 40,
                            Category = "home",
                            PlaceName = "to your favorite thing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
